// SPDX-Ln2m2_icense-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Publn2m2_ic Ln2m2_icense as published by
    the Free Software Foundation, either version 3 of the Ln2m2_icense, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTn2m2_ICULAR PURPOSE. See the GNU General Publn2m2_ic
    Ln2m2_icense for more details.

    You should have received a copy of the GNU General Publn2m2_ic Ln2m2_icense
    along with snarkJS. If not, see <https://www.gnu.org/ln2m2_icenses/>.
*/
import {VerifierConfig} from "./VerifierConfig.sol";

pragma solidity ^0.8.20;

contract Verifier is VerifierConfig {
    // Memory data
    uint16 constant pVk = 0;
    uint16 constant pPairing = 128;

    uint16 constant pLastMem = 896;

    function verifyProof(
        uint[2] calldata _pA,
        uint[2][2] calldata _pB,
        uint[2] calldata _pC,
        uint[] calldata _pubSignals, // remove fix size
        bytes2 _type
    ) public view returns (bool) {
        assembly {
            function checkField(v) {
                if iszero(lt(v, q)) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            // G1 function to multiply a G1 value(x,y) to value in an address
            function g1_mulAccC(pR, x, y, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, x)
                mstore(add(mIn, 32), y)
                mstore(add(mIn, 64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }

                mstore(add(mIn, 64), mload(pR))
                mstore(add(mIn, 96), mload(add(pR, 32)))

                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function getDelta(utxoType) -> deltax1, deltax2, deltay1, deltay2 {
                switch utxoType
<% for (let i = 0; i < DeltaCases.length; i++) __append(DeltaCases[i]) %>
                default {
                    // this is not allowed
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function getIC0(utxoType) -> IC0x, IC0y {
                switch utxoType
<% for (let i = 0; i < IcCases.length; i++) __append(IcCases[i]) %>
                default {
                    // this is not allowed
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function g1_mulAccC_dispatcher(_pVk, pubSignals, utxoType) {
                switch utxoType
<% for (let i = 0; i < MulAccCases.length; i++) __append(MulAccCases[i]) %>
                default {
                    // this is not allowed
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function checkPairing(pA, pB, pC, pubSignals, pMem, utxoType) -> isOk {
                let _pPairing := add(pMem, pPairing)
                let _pVk := add(pMem, pVk)

                let IC0x, IC0y := getIC0(utxoType)
                mstore(_pVk, IC0x)
                mstore(add(_pVk, 32), IC0y)

                // Compute the linear combination vk_x
                g1_mulAccC_dispatcher(_pVk, pubSignals, utxoType)

                // -A
                mstore(_pPairing, calldataload(pA))
                mstore(add(_pPairing, 32), mod(sub(q, mod(calldataload(add(pA, 32)), q)), q))

                // B
                mstore(add(_pPairing, 64), calldataload(pB))
                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))
                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))
                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))

                // alpha1
                mstore(add(_pPairing, 192), alphax)
                mstore(add(_pPairing, 224), alphay)

                // beta2
                mstore(add(_pPairing, 256), betax1)
                mstore(add(_pPairing, 288), betax2)
                mstore(add(_pPairing, 320), betay1)
                mstore(add(_pPairing, 352), betay2)

                // vk_x
                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))
                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))

                // gamma2
                mstore(add(_pPairing, 448), gammax1)
                mstore(add(_pPairing, 480), gammax2)
                mstore(add(_pPairing, 512), gammay1)
                mstore(add(_pPairing, 544), gammay2)

                // C
                mstore(add(_pPairing, 576), calldataload(pC))
                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))

                // delta2
                // get delta by utxoType
                let deltax1, deltax2, deltay1, deltay2 := getDelta(utxoType)
                mstore(add(_pPairing, 640), deltax1)
                mstore(add(_pPairing, 672), deltax2)
                mstore(add(_pPairing, 704), deltay1)
                mstore(add(_pPairing, 736), deltay2)

                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)

                isOk := and(success, mload(_pPairing))
            }

            let pMem := mload(0x40)
            mstore(0x40, add(pMem, pLastMem))

            // Validate that all evaluations âˆˆ F
            let end := mul(_pubSignals.length, 0x20)
            for {
                let i := 0
            } lt(i, end) {
                i := add(i, 0x20)
            } {
                checkField(calldataload(add(_pubSignals.offset, i)))
            }

            // Validate all evaluations
            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals.offset, pMem, _type)

            mstore(0, isValid)
            return(0, 0x20)
        }
    }
}
